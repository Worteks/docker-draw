apiVersion: v1
kind: Template
labels:
  app: draw
  template: draw-jenkins-pipeline
message: |-
  For more information about using this template, see https://github.com/Worteks/wsweet-ci
metadata:
  annotations:
    description: Draw - Jenkinsfile
      see https://github.com/Worteks/docker-draw
    iconClass: icon-java
    openshift.io/display-name: Draw CI
    openshift.io/documentation-url: https://github.com/Worteks/wsweet-ci
    openshift.io/provider-display-name: Worteks
    openshift.io/support-url: https://www.worteks.com
    tags: draw
  name: draw-jenkins-pipeline
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Tests Wsweet Draw images
    name: draw-jenkins-pipeline
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          def frontName    = 'cidrw'
          def templateMark = 'draw-jenkins-ci'
          def templateSel  = 'jenkins-ci-mark'
          pipeline {
              agent {
                  node {
                      label 'maven'
                  }
              }
              options {
                  timeout(time: 130, unit: 'MINUTES')
              }
              parameters {
                  string(defaultValue: '${OPENSHIFT_ROUTED_DOMAIN}', description: 'CI Router Root Domain', name: 'rootDomain')
                  string(defaultValue: 'master', description: 'Draw Docker Image - Source Git Branch', name: 'drawBranch')
                  string(defaultValue: 'master', description: 'Draw Docker Image - Source Git Hash', name: 'drawHash')
                  string(defaultValue: '${GIT_SOURCE_HOST}/Wsweet/docker-draw.git', description: 'Draw Docker Image - Source Git Repository', name: 'drawRepo')
              }
              stages {
                  stage('preamble') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      echo "Using project: ${openshift.project()}"
                                  }
                              }
                          }
                      }
                  }
                  stage('pre-cleanup') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      echo "cleaning up previous assets for draw-${frontName}-${params.drawHash}"
                                      openshift.selector("all", [ "${templateSel}": "${templateMark}-${params.drawHash}" ]).delete()
                                      openshift.selector("secrets", [ "${templateSel}": "${templateMark}-${params.drawHash}" ]).delete()
                                  }
                              }
                          }
                      }
                  }
                  stage('create') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      def namespace = "${openshift.project()}"
                                      try {
                                          timeout(10) {
                                              def cloneProto = "http"
                                              def created
                                              def objectsFromTemplate
                                              def privateRepo = false
                                              def repoHost = params.drawRepo.split('/')[0]
                                              def templatePath = "/tmp/workspace/${namespace}/${namespace}-draw-jenkins-pipeline/tmpdraw${params.drawBranch}/openshift"
                                              sh "git config --global http.sslVerify false"
                                              sh "rm -fr tmpdraw${params.drawBranch}; mkdir -p tmpdraw${params.drawBranch}"
                                              dir ("tmpdraw${params.drawBranch}") {
                                                  try {
                                                      withCredentials([string(credentialsId: "git-${repoHost}", variable: 'GIT_TOKEN')]) {
                                                          sh "echo 'https://${GIT_TOKEN}@${params.drawRepo}' >cloneFrom"
                                                          cloneProto = "https"
                                                          privateRepo = true
                                                      }
                                                      echo "cloning ${params.drawRepo} over https, using ${repoHost} token"
                                                  } catch(e) {
                                                      echo "caught ${e} - assuming no credentials required"
                                                      sh "echo 'http://${params.drawRepo}' >cloneFrom 2>/dev/null"
                                                      echo "cloning ${params.drawRepo} over http"
                                                  }
                                                  def cloneAddress = readFile('cloneFrom').trim()
                                                  sh "rm -f cloneFrom"
                                                  try {
                                                      // use ${params.drawHash} instead of branch?
                                                      // not critical, as only defines which ci.yaml template would be loaded
                                                      // not certain the branch param accepts exact hashes anyway
                                                      git([ branch: "${params.drawBranch}", changelog: false, poll: false, url: cloneAddress ])
                                                  } catch(e) {
                                                      echo "caught ${e} - failed cloning ${params.drawRepo}#${params.drawBranch}"
                                                      sh "cd .. ; rm -fr tmpdraw${params.drawBranch}"
                                                      throw e
                                                  }
                                              }
                                              try {
                                                  sh "test -d ${templatePath}"
                                              } catch (e) {
                                                  echo "Could not find ./openshift in ${params.drawRepo}#${params.drawBranch}"
                                                  sh "rm -fr /tmp/workspace/${namespace}/${namespace}-draw-jenkins-pipeline/tmpdraw${params.drawBranch}"
                                                  throw e
                                              }
                                              echo "Processing Draw:${params.drawHash}, from ${repoHost}, tagging to ${params.drawBranch}"
                                              try {
                                                  echo " == Creating ImageStream =="
                                                  objectsFromTemplate = openshift.process("-f", "${templatePath}/imagestream.yaml",
                                                      '-p', "FRONTNAME=wsweet")
                                                  echo "The template will create ${objectsFromTemplate.size()} objects"
                                                  created = openshift.apply(objectsFromTemplate)
                                                  created.withEach {
                                                      echo "Created ${it.name()} with labels ${it.object().metadata.labels}"
                                                  }
                                              } catch(e) {
                                                  echo "Failed creating ImageStream"
                                                  echo "${e}"
                                              }
                                              try {
                                                  echo " == Creating BuildConfigs =="
                                                  if (privateRepo) {
                                                      withCredentials([string(credentialsId: "git-${repoHost}", variable: 'GIT_TOKEN')]) {
                                                          objectsFromTemplate = openshift.process("-f", "${templatePath}/build-with-secret.yaml",
                                                              '-p', "GIT_DEPLOYMENT_TOKEN=${GIT_TOKEN}",
                                                              '-p', "DRAW_REPOSITORY_REF=${params.drawHash}",
                                                              '-p', "DRAW_REPOSITORY_URL=${cloneProto}://${params.drawRepo}",
                                                              '-p', "FRONTNAME=wsweet")
                                                      }
                                                  } else {
                                                      objectsFromTemplate = openshift.process("-f", "${templatePath}/build.yaml",
                                                          '-p', "DRAW_REPOSITORY_REF=${params.drawHash}",
                                                          '-p', "DRAW_REPOSITORY_URL=${cloneProto}://${params.drawRepo}",
                                                          '-p', "FRONTNAME=wsweet")
                                                  }
                                                  echo "The template will create ${objectsFromTemplate.size()} objects"
                                                  for (o in objectsFromTemplate) {
                                                      o.metadata.labels["${templateSel}"] = "${templateMark}-${params.drawHash}"
                                                  }
                                                  created = openshift.apply(objectsFromTemplate)
                                                  created.withEach {
                                                      echo "Created ${it.name()} from template with labels ${it.object().metadata.labels}"
                                                  }
                                              } catch(e) {
                                                  echo "Failed creating BuildConfigs"
                                                  echo "${e}"
                                              }
                                              echo " == Creating Demo =="
                                              objectsFromTemplate = openshift.process("-f", "${templatePath}/run-ephemeral.yaml",
                                                  '-p', "DRAW_IMAGE_TAG=${params.drawHash}",
                                                  '-p', "FRONTNAME=${frontName}-${params.drawHash}",
                                                  '-p', "WSWEET_ROOT_DOMAIN=${params.drawHash}.${params.rootDomain}")

                                              echo "The template will create ${objectsFromTemplate.size()} objects"
                                              for (o in objectsFromTemplate) {
                                                  o.metadata.labels["${templateSel}"] = "${templateMark}-${params.drawHash}"
                                              }
                                              created = openshift.create(objectsFromTemplate)
                                              created.withEach {
                                                  echo "Created ${it.name()} from template with labels ${it.object().metadata.labels}"
                                              }
                                          }
                                          sh "rm -fr /tmp/workspace/${namespace}/${namespace}-draw-jenkins-pipeline/tmpdraw${params.drawBranch}"
                                      } catch(e) {
                                          echo "in catch block while creating resources, cleaning up draw-${frontName}-${params.drawHash}"
                                          sh "rm -fr /tmp/workspace/${namespace}/${namespace}-draw-jenkins-pipeline/tmpdraw${params.drawBranch}"
                                          openshift.selector("all", [ "${templateSel}": "${templateMark}-${params.drawHash}" ]).delete()
                                          openshift.selector("secrets", [ "${templateSel}": "${templateMark}-${params.drawHash}" ]).delete()
                                          echo "Caught: ${e}"
                                          currentBuild.result = 'FAILURE'
                                          throw e
                                      }
                                  }
                              }
                          }
                      }
                  }
                  stage('build') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      try {
                                          timeout(90) {
                                              echo "watching draw-wsweet-${params.drawHash} docker image build"
                                              def builds = openshift.selector("bc", [ name: "draw-wsweet-${params.drawHash}" ]).related('builds')
                                              builds.untilEach(1) {
                                                  return (it.object().status.phase == "Complete")
                                              }
                                          }
                                      } catch(e) {
                                          echo "in catch block while building docker image, cleaning up draw-${frontName}-${params.drawHash} assets"
                                          openshift.selector("all", [ "${templateSel}": "${templateMark}-${params.drawHash}" ]).delete()
                                          openshift.selector("secrets", [ "${templateSel}": "${templateMark}-${params.drawHash}" ]).delete()
                                          echo "Caught: ${e}"
                                          currentBuild.result = 'FAILURE'
                                          throw e
                                      }
                                  }
                              }
                          }
                      }
                  }
                  stage('deploy') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      try {
                                          timeout(15) {
                                              def namespace = "${openshift.project()}"
                                              try {
                                                  sh """
                                                  oc login https://kubernetes.default.svc.cluster.local --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt --token=\$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) > /dev/null 2>&1
                                                  oc describe -n ${namespace} imagestreamtag draw-wsweet:${params.drawHash} || exit 1
                                                  """
                                              } catch(e) {
                                                  echo "in catch block while looking for Draw image"
                                                  echo "Assuming build failed. Sleeping for 3 minutes and re-scheduling job"
                                                  sleep 180
                                                  def jobName   = "${namespace}/${namespace}-draw-jenkins-pipeline"
                                                  def jobParams = [
                                                          [$class: 'StringParameterValue', name: "drawBranch", value: params.drawBranch],
                                                          [$class: 'StringParameterValue', name: "drawHash", value: params.drawHash],
                                                          [$class: 'StringParameterValue', name: "drawRepo", value: params.drawRepo]
                                                      ]
                                                  try {
                                                      build job: jobName, parameters: jobParams, propagate: false, wait: false
                                                  } catch(e1) {
                                                      echo "caught ${e1}"
                                                  }
                                                  throw e
                                              }
                                              retry(2) {
                                                  echo "watching draw-${frontName}-${params.drawHash} deployment rollout"
                                                  def dc = openshift.selector("dc", [ name: "draw-${frontName}-${params.drawHash}" ]).related('pods')
                                                  dc.untilEach(1) {
                                                      return (it.object().status.phase == "Running")
                                                  }
                                              }
                                          }
                                      } catch(e) {
                                          echo "in catch block while deploying, cleaning up draw-${frontName}-${params.drawHash} assets"
                                          openshift.selector("all", [ "${templateSel}": "${templateMark}-${params.drawHash}" ]).delete()
                                          openshift.selector("secrets", [ "${templateSel}": "${templateMark}-${params.drawHash}" ]).delete()
                                          echo "Caught: ${e}"
                                          currentBuild.result = 'FAILURE'
                                          throw e
                                      }
                                  }
                              }
                          }
                      }
                  }
                  stage('check') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      try {
                                          timeout(5) {
                                              echo "waiting an additional 2 minutes for applications to finish starting up"
                                              sleep 120
                                              retry(3) {
                                                  def drw = httpRequest ignoreSslErrors: true, url: "https://draw.${params.drawHash}.${params.rootDomain}", timeout: 30, httpMode: 'GET', validResponseCodes: '200:302'
                                                  println("GET portal status: " + drw.status)
                                                  println("GET portal content: " + drw.content)
                                              }
                                          }
                                      } catch(e) {
                                          echo "in catch block while checking Draw, cleaning up draw-${frontName}-${params.drawHash} assets"
                                          openshift.selector("all", [ "${templateSel}": "${templateMark}-${params.drawHash}" ]).delete()
                                          openshift.selector("secrets", [ "${templateSel}": "${templateMark}-${params.drawHash}" ]).delete()
                                          echo "Caught: ${e}"
                                          currentBuild.result = 'FAILURE'
                                          throw e
                                      }
                                  }
                              }
                          }
                      }
                  }
                  stage('tag') {
                      steps {
                          script {
                              if ("${params.drawBranch}" == "${params.drawHash}") {
                                  echo "skipping tag - source matches target"
                              } else {
                                  openshift.withCluster() {
                                      openshift.withProject() {
                                          try {
                                              timeout(5) {
                                                  def namespace  = "${openshift.project()}"
                                                  retry(3) {
                                                      sh """
                                                      oc login https://kubernetes.default.svc.cluster.local --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt --token=\$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) > /dev/null 2>&1
                                                      oc tag -n ${namespace} draw-wsweet:${params.drawHash} draw-wsweet:${params.drawBranch}
                                                      """
                                                  }
                                              }
                                          } catch(e) {
                                              echo "in catch block while tagging Draw image, cleaning up draw-${frontName}-${params.drawHash} assets"
                                              openshift.selector("all", [ "${templateSel}": "${templateMark}-${params.drawHash}" ]).delete()
                                              openshift.selector("secrets", [ "${templateSel}": "${templateMark}-${params.drawHash}" ]).delete()
                                              echo "Caught: ${e}"
                                              currentBuild.result = 'FAILURE'
                                              throw e
                                          }
                                      }
                                  }
                              }
                          }
                      }
                  }
                  stage('post-cleanup') {
                      steps {
                          script {
                              openshift.withCluster() {
                                  openshift.withProject() {
                                      openshift.selector("all", [ "${templateSel}": "${templateMark}-${params.drawHash}" ]).delete()
                                      openshift.selector("secrets", [ "${templateSel}": "${templateMark}-${params.drawHash}" ]).delete()
                                  }
                              }
                          }
                      }
                  }
              }
          }
      type: JenkinsPipeline
parameters:
- name: GIT_SOURCE_HOST
  description: Git FQDN we would build images from
  displayName: Git
  value: github.com
- name: OPENSHIFT_ROUTED_DOMAIN
  description: OpenShift Routers-served Root Domain
  displayName: CI Router Domain
  value: ci.dev.wopla.io
